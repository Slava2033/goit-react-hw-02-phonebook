{"version":3,"sources":["components/ContactForm/contactForm.js","components/ContactList/contactList.js","components/Filter/filter.js","App.js","reportWebVitals.js","index.js"],"names":["ContactForm","state","name","number","nameInputId","shortid","generate","numberInpitId","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","className","htmlFor","type","onChange","id","numberInputId","Component","ContactList","contacts","onDeleteContact","map","onClick","Filter","App","filter","addContact","newContact","find","contact","alert","changeFilter","getVisibleContacts","normalizedFilter","toLowerCase","includes","deleteContact","contactId","prevState","visibleContacts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c03324ee.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport './form.scss';\n\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: ''\n  }\n  \n  nameInputId = shortid.generate();\n  numberInpitId = shortid.generate();\n\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit = e => {\n    const { name, number } = this.state;\n    e.preventDefault();\n    this.props.onSubmit(name, number);\n    this.reset();\n  }  \n  \n  reset() {\n    this.setState({\n      name: '',\n      number: ''\n    })\n  } \n\n  render() {\n    return (\n      <form\n        className='form'\n        onSubmit={this.handleSubmit}>\n        <label\n          className='label'\n          htmlFor={this.nameInputId}>\n          Name\n          <input \n            className = 'input'\n            type=\"text\"\n            name=\"name\"\n            value={this.state.name}\n            onChange={this.handleChange}\n            id={this.nameInputId}\n          />\n        </label>\n        <label\n          className='label'      \n          htmlFor={this.numberInputId}>\n          Number\n          <input\n            className ='input'\n            type=\"text\"\n            name=\"number\"\n            value={this.state.number}\n            onChange={this.handleChange}\n            id={this.numberInputId}\n          />\n        </label>\n\n        <button\n          className='button'\n          type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    )\n  }\n}\n\n\nexport default ContactForm;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './contactList.scss'\n\n\nconst ContactList = ({ contacts, onDeleteContact }) => (\n  <ul className='list'>\n    {contacts.map(({ id, name, number }) => (\n      <li\n        className='listItem'\n        key={id}>\n        <span className='listItemText'>{name}:</span>\n        <span className='listItemText'>{number}</span>\n        <button\n          className='button'\n          type=\"button\"\n          onClick={() => onDeleteContact(id)}\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n  \nContactList.propTypes = {\n  contacts: PropTypes.array,\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n}\n\nexport default ContactList;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './filter.scss';\n\n\nconst Filter = ({ value, onChange }) => (\n  <label className=\"filterLabel\">\n    Find contacts by name\n    <input className= \"filterInput\" type='text' value={value} onChange={onChange} />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n}\n\nexport default Filter;","import React, { Component } from 'react';\nimport shortid from 'shortid';\n\nimport ContactForm from './components/ContactForm/contactForm';\nimport ContactList from './components/ContactList/contactList';\nimport Filter from './components/Filter/filter';\nimport './app.scss'\n\n\n\nclass App extends Component {\n  state = {\n    contacts: [\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n    {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\n    ],\n    filter: ''\n  }\n\n  addContact = (name, number) => {\n    const { contacts } = this.state;\n    const newContact = {\n      id: shortid.generate(),\n      name,\n      number,\n    }\n    if (contacts.find(contact => contact.name === newContact.name)) {\n      alert(`${newContact.name} is already in contacts.`)\n      return;\n    }\n\n    this.setState(({ contacts }) => ({\n      contacts: [newContact, ...contacts],\n    }));\n  };\n\n  changeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n  \n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n \n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId)\n    }));\n  };\n  \n  render() {\n    const { filter } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n\n\n    return (\n      <>\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={this.addContact}/>\n      <h2>Contacts</h2>\n      <Filter value={filter} onChange={this.changeFilter}/>\n        <ContactList contacts={visibleContacts} onDeleteContact={this.deleteContact}/>\n      </>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}